package rocks.muki.graphql.schema

import sbt._
import sangria.schema.Schema

/**
  * == GraphQL Schemas ==
  *
  * Data structure for storing all schemas defined in the build.
  *
  * @param schemas a vector of all defined schemas
  */
case class GraphQLSchemas(schemas: Vector[GraphQLSchema] = Vector.empty) {

  val schemaByLabel: Map[String, GraphQLSchema] =
    schemas.groupBy(_.label).mapValues(_.head)

  override def toString: String =
    schemas
      .map { schema =>
        val renderedSchema = schema.schema.renderPretty
          .split("\n")
          .map("  " + _)
          .mkString("\n")
        s"""|## Label: ${schema.label}
        |  Description: ${schema.description}
        |  Schema:
        |
        |$renderedSchema
     """.stripMargin
      }
      .mkString("\n")
}
case class GraphQLSchema(label: String,
                         description: String,
                         schema: Schema[Any, Any])

object GraphQLSchemas {

  /**
    * Label for the schema generated by the project build
    */
  val LABEL_BUILD: String = "build"

  /**
    * Label for the production schema
    */
  val LABEL_PROD: String = "prod"

  /**
    * type class for `++=` syntax in sbt files
    */
  implicit val appendValues
    : Append.Values[GraphQLSchemas, Vector[GraphQLSchema]] =
    (gqlSchemas: GraphQLSchemas, schemas: Vector[GraphQLSchema]) =>
      gqlSchemas.copy(schemas = gqlSchemas.schemas ++ schemas)

  /**
    * type class for `+=` syntax in sbt files
    */
  implicit val appendValue: Append.Value[GraphQLSchemas, GraphQLSchema] =
    (gqlSchemas: GraphQLSchemas, schema: GraphQLSchema) =>
      gqlSchemas.copy(schemas = gqlSchemas.schemas :+ schema)

}
